#!/usr/bin/env bash

# Constants
PATHS_PATH="$HOME/.config/slinky/paths"
PATHS_SEPARATOR=":"

log() {
  echo -e "\e[1m\e[93m$*\e[39m\e[0m"
}

err() {
  echo -e "\e[1m\e[31m$*\e[39m\e[0m"
}

# Display usage for this script
usage() {
	echo "A PC-Android sync tool
Usage: $0 [-d] [-h] [-p PATH] [-P] [-1] [-2]
  -d				Demo mode (no changes)
  -h				Show this screen
  -p PATH			Specify a paths file (default: $PATHS_PATH)
  -P				Preserve existing files
  -1				Force push PC -> Android
  -2				Force push Android -> PC"
}

# Make sure we have everything we need to run
assert_dependencies() {
	for dep in adb awk stat find sha1sum
	do
		if ! command -v "$dep" &>/dev/null
		then
	  		echo "Dependency $dep inaccessible"
	  		exit 1
		fi
	done
}

# Make sure the Android device is connected
assert_device_connected() {
  if [[ -z "$(adb devices -l | tail -n +2)" ]]
  then
    err "Android device not connected"
    exit 1
  fi
}

# Parse arguments passed to us and set relevant variables
parse_options() {
	while getopts ":dhp:P12" opt
	do
		case "$opt" in
		d)
			DEMO=true
			;;
		h)
			usage
			exit 0
			;;
		p)
			PATHS_PATH="$OPTARG"
			;;
		P)
			PRESERVE=true
			;;
		1)
			FORCE_PC_ANDROID=true
			;;
		2)
			FORCE_ANDROID_PC=true
			;;
		*)
			usage
			exit 1
			;;
		esac
	done
}

# Make sure our paths file exists
assert_paths_exist() {
	if [[ ! -f "$PATHS_PATH" ]]
	then
		err "Specified paths file does not exist"
		exit 1
	fi
}

# Source our paths file
prepare_paths() {
	# shellcheck source=/dev/null
	source "$PATHS_PATH"
}

# Make sure our paths variable was sourced
assert_paths() {
	if [[ -z "$PATHS" ]]
	then
		err "Paths file does not valid a PATHS array"
		exit 1
	fi
}

# Sync path from PC to Android
sync_pc_to_android() {
	log "PC -> Android"
	[[ -n "$DEMO" ]] && return

	local path_pc
	local path_android

	path_pc="$1"
	path_android="$2"

	[[ -z "$PRESERVE" ]] && adb shell rm -rf "$path_android"
	adb push "$path_pc" "$(dirname "$path_android")"
}

# Sync path from Android to PC
sync_android_to_pc() {
	log "Android -> PC"
	[[ -n "$DEMO" ]] && return

	local path_pc
	local path_android

	path_android="$1"
	path_pc="$2"

	[[ -z "$PRESERVE" ]] && rm -rf "$path_pc"
	adb pull "$path_android" "$(dirname "$path_pc")"
}

# Process all path pairs
process_paths() {
	for path in "${PATHS[@]}"
	do
		local path_pc
		local path_android
		local mtime_pc
		local mtime_android
		local sha1_pc
		local sha1_android

		echo -e "--- $path"

		path_pc="$(echo "$path" | awk -F "$PATHS_SEPARATOR" '{print $1}')"
		path_android="$(echo "$path" | awk -F "$PATHS_SEPARATOR" '{print $2}')"

		# Assert path pair validity
 		if [[ -z "$path_pc" ]] || [[ -z "$path_android" ]]
		then
			err "Entry invaid"
			continue
		fi

		# Process force commands
		if [[ -n "$FORCE_PC_ANDROID" ]]
		then
			sync_pc_to_android "$path_pc" "$path_android"
			continue
		elif [[ -n "$FORCE_ANDROID_PC" ]]
		then
			sync_android_to_pc "$path_android" "$path_pc"
			continue
		fi

		# Confirm file contents
		sha1_pc="$(find "$path_pc" -type f -print0 | sort -z | xargs -0 sha1sum | awk '{print $1}' | sha1sum | awk '{print $1}')"
		sha1_android="$(adb shell "find $path_android -type f -print0 | sort -z | xargs -0 sha1sum | awk '{print \$1}' | sha1sum | awk '{print \$1}'")"

		if [[ "$sha1_pc" == "$sha1_android" ]]
		then
			log "Already up-to-date"
			continue
		fi

		mtime_pc="$(find "$path_pc" -exec stat -c %Y {} \; | sort -nr | head -n 1)"
		mtime_android="$(adb shell "find $path_android -exec stat -c %Y {} \; | sort -nr | head -n 1")"

		# Compare last modify times
		if [[ "$mtime_pc" -gt "$mtime_android" ]]
		then
			sync_pc_to_android "$path_pc" "$path_android"
		elif [[ "$mtime_android" -gt "$mtime_pc" ]]
		then
			sync_android_to_pc "$path_android" "$path_pc"
		else
			log "Already up-to-date"
		fi
	done
}

parse_options "$@"
assert_paths_exist
prepare_paths
assert_paths
adb start-server
assert_device_connected
process_paths
